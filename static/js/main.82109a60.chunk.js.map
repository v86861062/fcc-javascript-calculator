{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","isStartZero","endsWithOperator","lastNumberHasDot","props","_this","Object","D_workspace_freeCodeCamp_Projects_front_end_libraries_projects_fcc_javascript_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_workspace_freeCodeCamp_Projects_front_end_libraries_projects_fcc_javascript_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_workspace_freeCodeCamp_Projects_front_end_libraries_projects_fcc_javascript_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","isAbleAddDot","str","test","handleClickNumber","number","setState","prevState","display","formula","handleClickDecimal","handleClickOperator","operator","replace","handleClickEquals","f","state","result","eval","String","e","console","log","handleClickClear","_this2","_this$state","react__WEBPACK_IMPORTED_MODULE_5___default","className","id","onClick","Component"],"mappings":"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","file":"static/js/main.82109a60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react'\nimport './App.scss'\n\nconst isStartZero = /^0/,\n      endsWithOperator = /[-x+/]$/,\n      lastNumberHasDot = /\\d+\\.\\d*$/\n      \nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      display: \"0\",\n      formula: \"\"\n    }\n  }\n\n  isAbleAddDot = (str) => {\n    if(lastNumberHasDot.test(str) || endsWithOperator.test(str)) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  handleClickNumber = (number) => {\n    this.setState(prevState => ({\n      display: isStartZero.test(prevState.display) ?\n        number : prevState.display + number,\n      formula: isStartZero.test(prevState.formula) ?\n        number : prevState.formula + number\n    }))\n  }\n\n  handleClickDecimal = () => {\n    this.setState(prevState => ({\n      display:  this.isAbleAddDot(prevState.display) ? \n        prevState.display + '.' : prevState.display,\n      formula:  this.isAbleAddDot(prevState.formula) ? \n        prevState.formula + '.' : prevState.formula,\n    }))\n  }\n\n  handleClickOperator = (operator) => {\n    this.setState(prevState => ({\n      display: operator,\n      formula: endsWithOperator.test(prevState.formula) ?\n                prevState.formula.replace(endsWithOperator, operator) : \n                prevState.formula + operator\n    }))\n  }\n\n  handleClickEquals = () => {\n    let f = this.state.formula.replace('x', '*')\n\n    try {\n      /* eval is eviL, \n       * 但輸入的formula是能掌控的，\n       * 這裡也沒有效能需求。 沒問題 :D */\n      let result = eval(f)\n      this.setState({ \n        display: result, \n        formula: String(result)\n      })\n    } \n    catch (e) {\n      /* 方便開發時方便找出不合理的 formula */\n      console.log(e)\n      console.log(\"formula: \" + f)\n    }\n  }\n\n  handleClickClear = () => {\n    this.setState(({ \n      display: '0',\n      formula: ''\n    }))\n  }\n\n  render() {\n    const { display, formula} = this.state\n    return (\n      <div className=\"calculator\">\n        <div id=\"equals\" onClick={this.handleClickEquals}>=</div>\n\n        <div id=\"zero\"  onClick={() => this.handleClickNumber('0')}>0</div>\n        <div id=\"one\"   onClick={() => this.handleClickNumber('1')}>1</div>\n        <div id=\"two\"   onClick={() => this.handleClickNumber('2')}>2</div>\n        <div id=\"three\" onClick={() => this.handleClickNumber('3')}>3</div>\n        <div id=\"four\"  onClick={() => this.handleClickNumber('4')}>4</div>\n        <div id=\"five\"  onClick={() => this.handleClickNumber('5')}>5</div>\n        <div id=\"six\"   onClick={() => this.handleClickNumber('6')}>6</div>\n        <div id=\"seven\" onClick={() => this.handleClickNumber('7')}>7</div>\n        <div id=\"eight\" onClick={() => this.handleClickNumber('8')}>8</div>\n        <div id=\"nine\"  onClick={() => this.handleClickNumber('9')}>9</div>\n        \n        <div id=\"subtract\" onClick={() => this.handleClickOperator('-')}>-</div>\n        <div id=\"multiply\" onClick={() => this.handleClickOperator('x')}>x</div>\n        <div id=\"divide\"   onClick={() => this.handleClickOperator('/')}>/</div>\n        <div id=\"add\"      onClick={() => this.handleClickOperator('+')}>+</div>\n\n        <div id=\"decimal\" onClick={this.handleClickDecimal}>.</div>\n        <div id=\"clear\" onClick={this.handleClickClear}>AC</div>\n        \n        <h1 id=\"formula\">{formula}</h1>\n        <h1 id=\"display\">{display}</h1>\n      </div>\n    )\n  }\n}\n\nexport default App\n"],"sourceRoot":""}